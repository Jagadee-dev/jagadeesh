AWSTemplateFormatVersion: 2010-09-09
Description: A CloudFormation Template to create AWS RDS & Redshift Secrets with its Rotation & Attachment.
Transform: AWS::Serverless-2016-10-31
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Naming Conventions
      Parameters:
        - EnvironmentType
        - ResourceNamePrefix
        - ServiceName
    - Label:
        default: Condition Parameters
      Parameters:
        - SecretType
        - SecretRotationRequired
    - Label:
        default: RotationLambda Inputs
      Parameters:
        - LambdaInputs
        - DBSubnetIds
    - Label:
        default: Common Secret Parameters
      Parameters:
        - SecretPassExcludeCharacters
        - InstanceName
        - SecretStringInputs
    - Label:
        default: Secret RotationSchedule Parameters
      Parameters:
        - SecretRotationDays
        - RotationDuration
        - CronExpresion
        - RotationDaysorCronScheduleRequired
        - RotateSecretImmediately
    - Label:
        default: Redshift Secrets
      Parameters:
        - RedshiftMasterSecretValues
        - AuditLogsSecretValues
        - DIGSecretValues
        - DWHSecretValues
        - RMASecretValues
        - LoanSecretValues
Parameters:
  SecretType:
    Type: String
    Description: 'Select RDS to create RDSSecrets & Redshift for RedshiftSecrets.'
    AllowedValues: ["Redshift", "RDS"]
  EnvironmentType:
    Type: String
    Description: 'Enter EnvironmentType according to need.'
  ResourceNamePrefix:
    Type: String
    Description: 'Enter prefix for Resource Names.'
  ServiceName:
    Type: String
    Description: '(Required) Specify the name of the service.'
  LambdaInputs:
    Type: CommaDelimitedList
    Description: "Enter the lambda inputs in the format 'SecurityGroupIds:Handler:MemorySize:Timeout:RunTime'."
  DBSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: 'The list of SubnetIDs in the above mentioned Virtual Private Cloud (VPC) where rotation lambda needs to be provisioned.'
  SecretPassExcludeCharacters:
    Type: String
    Description: 'Enter the special characters to be excluded from secret values.'
  SecretRotationDays:
    Type: Number
    Description: '(Conditional) Enter the number of days between automatic scheduled rotations of the secret.'
    MinValue: 1
    MaxValue: 1000
  SecretRotationRequired:
    Type: String
    Description: 'Enter true for secret rotation & false to skip.'
    AllowedValues: ["true", "false"]
  SecretStringInputs:
    Type: CommaDelimitedList
    Description: "Enter the inputs for Generating Secret String in this format 'ExcludeLowercase:ExcludeNumbers:ExcludePunctuation:ExcludeUppercase:IncludeSpace:RequireEachIncludedType'."
  RedshiftMasterSecretValues:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip, Enter Redshift Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}'
  RotationDuration:
    Type: String
    Description: '(Conditional) Enter the duration in hours to rotate the secret during the Scheduled Window.'
  CronExpression:
    Type: String
    Description: '(Conditional) Enter the expression that defines the schedule for rotating your secret.'
  RotationDaysorCronScheduleRequired:
    Type: CommaDelimitedList
    Description: '(Required) Enter true in Index 0 for specifying SecretRotationDays & Enter true in Index 1 for specifying CronExpression. Both Index 0 & 1 cannot be true as CloudFormation supports either SecretRotationDays or CronExpression only. eg-true,false.'
    AllowedValues: ["true", "false"]
  AuditLogsSecretValues:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip, Enter Redshift Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}'
  DIGSecretValues:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip, Enter Redshift Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}'
  DWHSecretValues:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip, Enter Redshift Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}'
  RMASecretValues:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip, Enter Redshift Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}'
  LoanSecretValues:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip, Enter Redshift Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}'
  RotateSecretImmediately:
    Type: String
    Description: 'Enter true to rotate secret immediately & false not to rotate secret immediately'
Conditions:
  IsSecretRotationRequired: !Equals [true, !Ref SecretRotationRequired]
  IsRedshiftSecretRequired: !Equals [Redshift, !Ref SecretType]
  IsRDSSecretRequired: !Equals [RDS, !Ref SecretType]
  IsRotationDaysRequired: !Equals [true, !Select [0, !Ref RotationDaysorCronScheduleRequired]]
  IsCronExpressionRequired: !Equals [true, !Select [1, !Ref RotationDaysorCronScheduleRequired]]
  RedshiftMasterSecretReq: !Equals [CREATE, !Select [0, !Ref RedshiftMasterSecretValues]]
  RedshiftMasterRotationReq: !And [!Condition IsSecretRotationRequired, !Condition RedshiftMasterSecretReq]
  AuditLogsSecretReq: !Equals [CREATE, !Select [0, !Ref AuditLogsSecretValues]]
  AuditLogsRotationReq: !And [!Condition IsSecretRotationRequired, !Condition AuditLogsSecretReq]
  DIGSecretReq: !Equals [CREATE, !Select [0, !Ref DIGSecretValues]]
  DIGRotationReq: !And [!Condition IsSecretRotationRequired, !Condition DIGSecretReq]
  DWHSecretReq: !Equals [CREATE, !Select [0, !Ref DWHSecretValues]]
  DWHRotationReq: !And [!Condition IsSecretRotationRequired, !Condition DWHSecretReq]
  RMASecretReq: !Equals [CREATE, !Select [0, !Ref RMASecretValues]]
  RMARotationReq: !And [!Condition IsSecretRotationRequired, !Condition RMASecretReq]
  LoanSecretReq: !Equals [CREATE, !Select [0, !Ref LoanSecretValues]]
  LoanRotationReq: !And [!Condition IsSecretRotationRequired, !Condition LoanSecretReq]
Resources:
#Redshift
  RedshiftRotationLambdaRole:
    Type: 'AWS::IAM::Role'
    Condition: IsSecretRotationRequired
    Properties:
      RoleName: !Sub '${ResourceNamePrefix}-${EnvironmentType}-Redshift-SecretRotation-Role'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: 'lambda.amazonaws.com'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: !Sub '${ResourceNamePrefix}-${EnvironmentType}-RedshiftLambda-Vpc-Policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DeleteNetworkInterface' 
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DetachNetworkInterface'
                Resource: '*'
                Effect: Allow
        - PolicyName: !Sub '${ResourceNamePrefix}-${EnvironmentType}-RedshiftSecret-Policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'secretsmanager:DescribeSecret'
                  - 'secretsmanager:GetSecretValue'
                  - 'secretsmanager:PutSecretValue'
                  - 'secretsmanager:UpdateSecretVersionStage'
                Resource: !Sub 'arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-*'
                Effect: Allow
                Condition:
                  StringEquals:
                    'secretsmanager:resource/AllowRotationLambdaArn': !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${ResourceNamePrefix}-${EnvironmentType}-Redshift-SecretRotation-Lmbda'
              - Action: 'secretsmanager:GetRandomPassword'
                Resource: '*'
                Effect: Allow
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-RedshiftSecretRotation-Lmbda-Role'
        - Key: ApplicationRole
          Value: RedshiftSecretRotation-Role
  RedshiftRotationLambda:
    Type: 'AWS::Serverless::Function'
    Condition: IsSecretRotationRequired
    Properties:
      CodeUri: ../source_code/lambda/redshift_secret_rotation
      Description: Conducts an AWS SecretsManager secret rotation for Redshift using single user rotation scheme.
      VpcConfig: 
        SubnetIds: !Ref DBSubnetIds
        SecurityGroupIds: 
          - !Select [ 0, !Split [ ':', !Select [ 0, !Ref LambdaInputs ] ] ]
      Environment:
        Variables:
          SECRETS_MANAGER_ENDPOINT: !Sub 'https://secretsmanager.${AWS::Region}.amazonaws.com'
          EXCLUDE_CHARACTERS: !Ref SecretPassExcludeCharacters
      Handler: !Select [ 1, !Split [ ':', !Select [ 0, !Ref LambdaInputs ] ] ]
      MemorySize: !Select [ 2, !Split [ ':', !Select [ 0, !Ref LambdaInputs ] ] ]
      Role: !GetAtt RedshiftRotationLambdaRole.Arn
      Timeout: !Select [ 3, !Split [ ':', !Select [ 0, !Ref LambdaInputs ] ] ]
      Runtime: !Select [ 4, !Split [ ':', !Select [ 0, !Ref LambdaInputs ] ] ]
      FunctionName: !Sub '${ResourceNamePrefix}-${EnvironmentType}-Redshift-SecretRotation-Lmbda'
  RedshiftRotationLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Condition: IsSecretRotationRequired
    DependsOn: RedshiftRotationLambda
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt RedshiftRotationLambda.Arn
      Principal: !Sub 'secretsmanager.amazonaws.com'
      SourceArn: !Sub 'arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-*'
#RedshiftMasterSecret
  RedshiftMasterSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: RedshiftMasterSecretReq
    Properties:
      Description: This is a Secrets Manager secret for Redshift DB instance.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Master-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref RedshiftMasterSecretValues ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Master-Scrt'  
        - Key: ApplicationRole
          Value: Redshift-Master-Scrt
  RedshiftMasterSecretRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: RedshiftMasterRotationReq
    DependsOn: RedshiftRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt RedshiftRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref RedshiftMasterSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  AuditLogsSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: AuditLogsSecretReq
    Properties:
      Description: This is a Secrets Manager secret for AuditLogs Service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-AuditLogs-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref AuditLogsSecretValues ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-AuditLogs-Scrt'  
        - Key: ApplicationRole
          Value: Redshift-AuditLogs-Scrt
  AuditLogsSecretRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: AuditLogsRotationReq
    DependsOn: RedshiftRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt RedshiftRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref AuditLogsSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  DIGSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: DIGSecretReq
    Properties:
      Description: This is a Secrets Manager secret for DIG Service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-DIG-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref DIGSecretValues ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-DIG-Scrt'  
        - Key: ApplicationRole
          Value: Redshift-DIG-Scrt
  DIGSecretRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: DIGRotationReq
    DependsOn: RedshiftRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt RedshiftRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref DIGSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  DWHSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: DWHSecretReq
    Properties:
      Description: This is a Secrets Manager secret for SeedData, DWH Scripts Automation & Comparison Service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-DWH-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref DWHSecretValues ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-DWH-Scrt'  
        - Key: ApplicationRole
          Value: Redshift-DWH-Scrt
  DWHSecretRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: DWHRotationReq
    DependsOn: RedshiftRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt RedshiftRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref DWHSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  RMASecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: RMASecretReq
    Properties:
      Description: This is a Secrets Manager secret for RMA Service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-RMA-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref RMASecretValues ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-RMA-Scrt'  
        - Key: ApplicationRole
          Value: Redshift-RMA-Scrt
  RMASecretRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: RMARotationReq
    DependsOn: RedshiftRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt RedshiftRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref RMASecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  LoanSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: LoanSecretReq
    Properties:
      Description: This is a Secrets Manager secret for Loan Scripts Automation & Comparison Service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Loan-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref LoanSecretValues ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Loan-Scrt'  
        - Key: ApplicationRole
          Value: Redshift-Loan-Scrt
  LoanSecretRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: LoanRotationReq
    DependsOn: RedshiftRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt RedshiftRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref LoanSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
Outputs:
  RedshiftMasterSecretName:
    Value: !If
      - RedshiftMasterSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Master-Scrt'
      - 'NotCreated'
  RedshiftMasterSecretArn:
    Value: !If
      - RedshiftMasterSecretReq
      - !Ref RedshiftMasterSecret
      - 'NotCreated'
  AuditLogsSecretName:
    Value: !If
      - AuditLogsSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-AuditLogs-Scrt'
      - 'NotCreated'
  AuditLogsSecretArn:
    Value: !If
      - AuditLogsSecretReq
      - !Ref AuditLogsSecret
      - 'NotCreated'
  DIGSecretName:
    Value: !If
      - DIGSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-DIG-Scrt'
      - 'NotCreated'
  DIGSecretArn:
    Value: !If
      - DIGSecretReq
      - !Ref DIGSecret
      - 'NotCreated'
  DWHSecretName:
    Value: !If
      - DWHSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-DWH-Scrt'
      - 'NotCreated'
  DWHSecretArn:
    Value: !If
      - DWHSecretReq
      - !Ref DWHSecret
      - 'NotCreated'
  RMASecretName:
    Value: !If
      - RMASecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-RMA-Scrt'
      - 'NotCreated'
  RMASecretArn:
    Value: !If
      - RMASecretReq
      - !Ref RMASecret
      - 'NotCreated'
  RMASecretShortArn:
    Value: !If
      - RMASecretReq
      - !Select [ 6 , !Split [ ':', !Ref RMASecret ]]
      - 'NotCreated'
  LoanSecretName:
    Value: !If
      - LoanSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Loan-Scrt'
      - 'NotCreated'
  LoanSecretArn:
    Value: !If
      - LoanSecretReq
      - !Ref LoanSecret
      - 'NotCreated'
  LoanSecretShortArn:
    Value: !If
      - LoanSecretReq
      - !Select [ 6 , !Split [ ':', !Ref LoanSecret ]]
      - 'NotCreated'
