AWSTemplateFormatVersion: 2010-09-09
Description: >
    This template generates a generic CI/CD Pipeline for Serverless Apps deployment. Version 1.0.
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "CodePipeline Configurations"
        Parameters: 
          - GithubRepoNames
          - GithubBranchName
          - GithubUser
      - Label:
          default: "CodeBuild Configurations"
        Parameters:
          - CodebuildEnvironment
          - EnvironmentComputeType
          - BuildImageVersion
          - S3BucketBuildEnvs
          - AppSyncAPIId
      - Label:
          default: "S3 Configurations"
        Parameters:
          - CreateArtifactBucket
          - PipelineArtifactsBucketName
          - S3ObjectRetentionDays
      - Label:
          default: "Webhook Configurations"
        Parameters:
          - AutoDeployment
          - GithubTokenSecretName
      - Label: 
          default: "Network Configurations"
        Parameters: 
          - VpcId
          - AppSubnetIds
          - ServerlessSgId
      - Label: 
          default: "Naming Conventions"
        Parameters: 
          - ResourceNamePrefix
          - EnvironmentType
          - ServiceName
          - S3AccessLogBucketName
Parameters:
  GithubRepoNames:
    Type: CommaDelimitedList
    Description: Enter the Github Repository Names.
  GithubTokenSecretName:
    Type: String
    Description: Specify name of the secret manager name, where github token stored.
  GithubBranchName:
    Type: String
    Description: Github Branch for the Github repo.
  GithubUser:
    Type: String
    Description: Github user where the repository lives.
  AutoDeployment:
    Type: String
    Description: This option enables auto deployment for pipeline.
    AllowedValues: [true, false]            
  PipelineArtifactsBucketName:
    Type: String
    Description: The S3 bucket where artifacts for the pipeline are stored.
  S3AccessLogBucketName:
    Type: String
    Description: Enter the name of the S3 Bucket, where s3 access logs will be stored.
  ServiceName:
    Type: String
    Description: Specify the name of the service. 
  EnvironmentType:
    Type: String
    Description: Name your EnvironmentType According to your need.
  ResourceNamePrefix:
    Type: String
    Description: Enter prefix for Resource Names.
  CodebuildEnvironment:
    Type: String
    Description: Enter the environment type for codebuild.
    AllowedValues:
      - LINUX_CONTAINER
      - WINDOWS_CONTAINER
  EnvironmentComputeType:
    Type: String
    Description: Enter the environment compute type for codebuild.
    AllowedValues:
      - BUILD_GENERAL1_SMALL
      - BUILD_GENERAL1_MEDIUM
      - BUILD_GENERAL1_LARGE
  BuildImageVersion:
    Type: String
    Description: The image version that identifies the Docker image to use for this build project.
  AppSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: A list of two subnet IDs in your environment VPC.
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The ID of the Amazon VPC used for environment.
  S3ObjectRetentionDays:
    Type: CommaDelimitedList
    Description: '(Required) Specify the s3 object retention days in following format: CurrentVersionExpirationInDays,NoncurrentVersionExpirationInDays. Min:30 Max:1000'
  AppSyncAPIId:
    Type: String
    Description: Enter the AppSyncAPIId value. Can find the value from appsync console (eg-Nds-Cync-Los-Dev-AppSyncAPI).
  CreateArtifactBucket:
    Type: String
    Description: Select true to create a new artifact bucket.
    AllowedValues:
      - true
      - false
  S3BucketBuildEnvs:
    Type: CommaDelimitedList
    Description: Enter the list of S3 bucket names environment variables to add in codebuild project.
    Default: 'N:N,N:N,N:N,N:N,N:N'
  ServerlessSgId:
    Type: String
    Description: Enter the ID of Serverless Security Group.
Conditions:
  ShouldCreateWebhook: !Equals [true, !Ref AutoDeployment]
  IsLoggingEnabled: !Not [!Equals [ !Ref S3AccessLogBucketName , '']]
  IsNewArtifactBucketRequired: !Equals [true, !Ref CreateArtifactBucket]
  S3EnvVar0Exist: !Equals [ !Select [ 0, !Ref S3BucketBuildEnvs ], "N:N" ]
  S3EnvVar1Exist: !Equals [ !Select [ 1, !Ref S3BucketBuildEnvs ], "N:N" ]
  S3EnvVar2Exist: !Equals [ !Select [ 2, !Ref S3BucketBuildEnvs ], "N:N" ]
  S3EnvVar3Exist: !Equals [ !Select [ 3, !Ref S3BucketBuildEnvs ], "N:N" ]
  S3EnvVar4Exist: !Equals [ !Select [ 4, !Ref S3BucketBuildEnvs ], "N:N" ]
  GitSource0Found: !Not [!Equals [ !Select [ 0, !Ref GithubRepoNames ], "None" ]]
  GitSource1Found: !Not [!Equals [ !Select [ 1, !Ref GithubRepoNames ], "None" ]]
  GitSource2Found: !Not [!Equals [ !Select [ 2, !Ref GithubRepoNames ], "None" ]]
  GitSource3Found: !Not [!Equals [ !Select [ 3, !Ref GithubRepoNames ], "None" ]]
Resources:
  Webhook:
    Type: AWS::CodePipeline::Webhook
    Condition: ShouldCreateWebhook
    Properties:
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Webhook'
      AuthenticationConfiguration:
        SecretToken: !Sub '{{resolve:secretsmanager:${GithubTokenSecretName}:SecretString:GithubToken}}'
      Filters:
        - JsonPath: "$.ref"   
          MatchEquals: refs/heads/{Branch}      
      Authentication: GITHUB_HMAC       
      TargetPipeline: !Ref Pipeline
      TargetAction: Source
      TargetPipelineVersion: !GetAtt Pipeline.Version
      RegisterWithThirdParty: 'true'
  ArtifactsBucket:
    Type: 'AWS::S3::Bucket'
    Condition: IsNewArtifactBucketRequired
    Properties:
      Tags: 
         - Key: Name
           Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Artifacts-Bucket'
         - Key: ApplicationRole
           Value: !Sub '${ServiceName}-Artifact-Bucket'
      BucketName: !Ref PipelineArtifactsBucketName
      AccessControl: Private
      LoggingConfiguration:
        !If
        - IsLoggingEnabled
        - DestinationBucketName: !Ref S3AccessLogBucketName
          LogFilePrefix: !Sub '${PipelineArtifactsBucketName}/'
        - !Ref "AWS::NoValue"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: "true"
        BlockPublicPolicy: "true"
        IgnorePublicAcls: "true"
        RestrictPublicBuckets: "true"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: !Select [ 0 , !Ref S3ObjectRetentionDays ]
            NoncurrentVersionExpirationInDays: !Select [ 1 , !Ref S3ObjectRetentionDays ]
            Status: Enabled
            Id: !Sub '${ResourceNamePrefix}-${EnvironmentType}-S3Object-Delete-Rule'
  ArtifactsBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Condition: IsNewArtifactBucketRequired
    Properties:
      Bucket: !Ref ArtifactsBucket
      PolicyDocument:
        Statement:
          - Sid: AllowSSLRequestsOnly
            Effect: Deny
            Principal: '*'
            Action:
              - 's3:*'
            Resource:
              - !Sub 'arn:aws:s3:::${ArtifactsBucket}/*'
              - !Sub 'arn:aws:s3:::${ArtifactsBucket}'
            Condition:
              Bool:
                'aws:SecureTransport': false
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Tags: 
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-CodeBuildProject'
        - Key: ApplicationRole
          Value: !Sub '${ServiceName}-CodeBuild'
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-CodeBuildProject'
      Description: !Sub Build project for the ${ServiceName}
      TimeoutInMinutes: 60
      ConcurrentBuildLimit: 1
      Cache:
        Type: NO_CACHE
      Artifacts:
        Type: CODEPIPELINE
      Environment: 
        Type: !Ref CodebuildEnvironment
        ComputeType: !Ref EnvironmentComputeType
        Image: !Ref BuildImageVersion  # More info on Images: https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html
        EnvironmentVariables:
          - Name: BUILD_OUTPUT_BUCKET
            Value: !Ref PipelineArtifactsBucketName
          - Name: EnvironmentType
            Value: !Ref EnvironmentType
          - Name: ResourceNamePrefix
            Value: !Ref ResourceNamePrefix
          - Name: GithubToken
            Value: !Sub '${GithubTokenSecretName}:GithubToken'
            Type: SECRETS_MANAGER
          - Name: AppSyncAPIId
            Value: !Ref AppSyncAPIId
          - Name: BUILD_OUTPUT_PREFIX
            Value: !Sub '${EnvironmentType}-${ServiceName}/Package_Outputs/'
          - !If
            - S3EnvVar0Exist
            - !Ref "AWS::NoValue"
            - Name:  !Select [ 0, !Split [ ':', !Select [ 0, !Ref S3BucketBuildEnvs ] ] ]
              Value:  !Select [ 1, !Split [ ':', !Select [ 0, !Ref S3BucketBuildEnvs ] ] ]
          - !If
            - S3EnvVar1Exist
            - !Ref "AWS::NoValue"
            - Name:  !Select [ 0, !Split [ ':', !Select [ 1, !Ref S3BucketBuildEnvs ] ] ]
              Value:  !Select [ 1, !Split [ ':', !Select [ 1, !Ref S3BucketBuildEnvs ] ] ]
          - !If
            - S3EnvVar2Exist
            - !Ref "AWS::NoValue"
            - Name:  !Select [ 0, !Split [ ':', !Select [ 2, !Ref S3BucketBuildEnvs ] ] ]
              Value:  !Select [ 1, !Split [ ':', !Select [ 2, !Ref S3BucketBuildEnvs ] ] ]
          - !If
            - S3EnvVar3Exist
            - !Ref "AWS::NoValue"
            - Name:  !Select [ 0, !Split [ ':', !Select [ 3, !Ref S3BucketBuildEnvs ] ] ]
              Value:  !Select [ 1, !Split [ ':', !Select [ 3, !Ref S3BucketBuildEnvs ] ] ]
          - !If
            - S3EnvVar4Exist
            - !Ref "AWS::NoValue"
            - Name:  !Select [ 0, !Split [ ':', !Select [ 4, !Ref S3BucketBuildEnvs ] ] ]
              Value:  !Select [ 1, !Split [ ':', !Select [ 4, !Ref S3BucketBuildEnvs ] ] ]
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        BuildSpec: |-
          version: 0.2
          phases:
            install:
              commands:
                - npm install -g graphql-schema-utilities
            build:
              commands:
                - graphql-schema-utilities -d -s  "{./graphql/**/*.graphql,$CODEBUILD_SRC_DIR_loan/graphql/*.graphql,$CODEBUILD_SRC_DIR_notification/graphql/*.graphql,./**/*.graphql}" -o merged_schema.graphql
                - npm run execute-remove-directive
                - cat merged_schema.graphql
                - base64 merged_schema.graphql > encodedData.txt
                - aws appsync start-schema-creation --api-id $AppSyncAPIId --definition "$(cat encodedData.txt)"
                - sleep 10
                - aws appsync get-schema-creation-status --api-id $AppSyncAPIId
            post_build:
              commands:
                - echo "Buildspec Post_Build Phase"  
        Type: CODEPIPELINE
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Sub '${ResourceNamePrefix}-${EnvironmentType}-CodeBuild-Logs'
          Status: ENABLED
          StreamName: !Sub '${ServiceName}-Build'
      VpcConfig:
        SecurityGroupIds: 
        - !Ref ServerlessSgId
        Subnets: !Ref AppSubnetIds
        VpcId: !Ref VpcId
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Tags: 
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Pipeline'
        - Key: ApplicationRole
          Value: !Sub '${ServiceName}-CodePipeline'
      ArtifactStore: 
        Location: !Ref PipelineArtifactsBucketName
        Type: S3
      Name: !Sub '${EnvironmentType}-${ServiceName}'
      RoleArn: !GetAtt CodePipelineExecutionRole.Arn
      Stages:
        - Name: Source
          Actions:
          - !If 
            - GitSource0Found
            - Name: Source
              ActionTypeId:
              # More info on Possible Values: https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: "1"
              Configuration:
                Owner: !Ref GithubUser
                Repo: !Select [ 0, !Ref GithubRepoNames ]
                Branch: !Ref GithubBranchName
                OAuthToken: !Sub '{{resolve:secretsmanager:${GithubTokenSecretName}:SecretString:GithubToken}}'
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: CP
              RunOrder: 1
            - !Ref "AWS::NoValue"
          - !If 
            - GitSource1Found
            - Name: Source2
              ActionTypeId:
              # More info on Possible Values: https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: "1"
              Configuration:
                Owner: !Ref GithubUser
                Repo: !Select [ 1, !Ref GithubRepoNames ]
                Branch: !Ref GithubBranchName
                OAuthToken: !Sub '{{resolve:secretsmanager:${GithubTokenSecretName}:SecretString:GithubToken}}'
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: loan
              RunOrder: 1
            - !Ref "AWS::NoValue"
          - !If 
            - GitSource2Found
            - Name: Source3
              ActionTypeId:
              # More info on Possible Values: https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: "1"
              Configuration:
                Owner: !Ref GithubUser
                Repo: !Select [ 2, !Ref GithubRepoNames ]
                Branch: !Ref GithubBranchName
                OAuthToken: !Sub '{{resolve:secretsmanager:${GithubTokenSecretName}:SecretString:GithubToken}}'
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: notification
              RunOrder: 1
            - !Ref "AWS::NoValue"
          - !If 
            - GitSource3Found
            - Name: Source4
              ActionTypeId:
              # More info on Possible Values: https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: "1"
              Configuration:
                Owner: !Ref GithubUser
                Repo: !Select [ 3, !Ref GithubRepoNames ]
                Branch: !Ref GithubBranchName
                OAuthToken: !Sub '{{resolve:secretsmanager:${GithubTokenSecretName}:SecretString:GithubToken}}'
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: Source4
              RunOrder: 1
            - !Ref "AWS::NoValue"
        - Name: Build
          Actions:
            - Name: CodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration: {"ProjectName": !Sub "${CodeBuildProject}","PrimarySource": "CP"}
                #ProjectName: !Ref CodeBuildProject
              InputArtifacts: 
                - Name: CP
                - Name: loan
                - Name: notification
              OutputArtifacts:
                - Name: Build
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
        RoleName: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-CodeBuildServiceRole'
        Tags: 
          - 
            Key: Name
            Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-CodeBuildServiceRole'
          -
            Key: ApplicationRole
            Value: !Sub '${ServiceName}-Build-Role'
        AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: 
                  - 'sts:AssumeRole'
                Effect: Allow
                Principal:
                  Service:
                    - codebuild.amazonaws.com
        Path: /
        Policies:
            - PolicyName: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-CodeBuildArtifactsBucket'
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - 
                    Effect: Allow
                    Action: 
                      - 's3:GetObject'
                      - 's3:GetObjectVersion'
                      - 's3:PutObject'
                    Resource:
                      - !Sub 'arn:aws:s3:::${PipelineArtifactsBucketName}/*'
                      - !Sub 'arn:aws:s3:::${PipelineArtifactsBucketName}'
                      - !If
                        - S3EnvVar0Exist
                        - !Ref 'AWS::NoValue'
                        - !Join 
                          - ''
                          - - 'arn:aws:s3:::'
                            - !Select [ 1, !Split [ ':', !Select [ 0, !Ref S3BucketBuildEnvs ] ] ]
                            - /*
                      - !If
                        - S3EnvVar0Exist
                        - !Ref 'AWS::NoValue'
                        - !Join 
                          - ''
                          - - 'arn:aws:s3:::'
                            - !Select [ 1, !Split [ ':', !Select [ 0, !Ref S3BucketBuildEnvs ] ] ]
                      - !If
                        - S3EnvVar1Exist
                        - !Ref 'AWS::NoValue'
                        - !Join 
                          - ''
                          - - 'arn:aws:s3:::'
                            - !Select [ 1, !Split [ ':', !Select [ 1, !Ref S3BucketBuildEnvs ] ] ]
                            - /*
                      - !If
                        - S3EnvVar1Exist
                        - !Ref 'AWS::NoValue'
                        - !Join 
                          - ''
                          - - 'arn:aws:s3:::'
                            - !Select [ 1, !Split [ ':', !Select [ 1, !Ref S3BucketBuildEnvs ] ] ]
                      - !If
                        - S3EnvVar2Exist
                        - !Ref 'AWS::NoValue'
                        - !Join 
                          - ''
                          - - 'arn:aws:s3:::'
                            - !Select [ 1, !Split [ ':', !Select [ 2, !Ref S3BucketBuildEnvs ] ] ]
                            - /*
                      - !If
                        - S3EnvVar2Exist
                        - !Ref 'AWS::NoValue'
                        - !Join 
                          - ''
                          - - 'arn:aws:s3:::'
                            - !Select [ 1, !Split [ ':', !Select [ 2, !Ref S3BucketBuildEnvs ] ] ]
                      - !If
                        - S3EnvVar3Exist
                        - !Ref 'AWS::NoValue'
                        - !Join 
                          - ''
                          - - 'arn:aws:s3:::'
                            - !Select [ 1, !Split [ ':', !Select [ 3, !Ref S3BucketBuildEnvs ] ] ]
                            - /*
                      - !If
                        - S3EnvVar3Exist
                        - !Ref 'AWS::NoValue'
                        - !Join 
                          - ''
                          - - 'arn:aws:s3:::'
                            - !Select [ 1, !Split [ ':', !Select [ 3, !Ref S3BucketBuildEnvs ] ] ]
                      - !If
                        - S3EnvVar4Exist
                        - !Ref 'AWS::NoValue'
                        - !Join 
                          - ''
                          - - 'arn:aws:s3:::'
                            - !Select [ 1, !Split [ ':', !Select [ 4, !Ref S3BucketBuildEnvs ] ] ]
                            - /*
                      - !If
                        - S3EnvVar4Exist
                        - !Ref 'AWS::NoValue'
                        - !Join 
                          - ''
                          - - 'arn:aws:s3:::'
                            - !Select [ 1, !Split [ ':', !Select [ 4, !Ref S3BucketBuildEnvs ] ] ]
            - PolicyName: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Secret-Policy'
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                        - 'secretsmanager:GetSecretValue'
                    Resource: 
                      - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${GithubTokenSecretName}-*'
            - PolicyName: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Ec2-Policy'
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  -
                    Effect: Allow
                    Action:
                      - ec2:DescribeDhcpOptions
                      - ec2:DescribeNetworkInterfaces
                      - ec2:DeleteNetworkInterface
                      - ec2:DescribeSubnets
                      - ec2:DescribeSecurityGroups
                      - ec2:DescribeVpcs
                    Resource:
                      - "*"
                  - Effect: Allow
                    Action:
                      - 'appsync:GraphQL'
                      - 'appsync:ListGraphqlApis'
                      - 'appsync:StartSchemaCreation'
                      - 'appsync:GetSchemaCreationStatus'
                      - 'appsync:ListTypes'
                      - 'appsync:ListApiKeys'
                      - 'appsync:ListFunctions'
                    Resource: "*"
                  - Effect: Allow
                    Action:
                      - 'ssm:GetParameter'
                      - 'ssm:GetParameters'
                    Resource: "*"
                  - Effect: Allow
                    Action:
                    - ec2:CreateNetworkInterfacePermission
                    Resource:
                      Fn::Sub: arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*
                  - Effect: Allow
                    Action:
                      - logs:CreateLogStream
                      - logs:PutLogEvents
                    Resource: 
                     - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ResourceNamePrefix}-${EnvironmentType}-CodeBuild-Logs*'
                  - Effect: Allow
                    Action:
                    - ec2:CreateNetworkInterface
                    Resource:
                      - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${ServerlessSgId}'
                      - !Sub >-
                        arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*
                      - !Sub 
                        - >-
                          arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${Subnet}
                        - Subnet: !Select
                          - 0
                          - !Ref AppSubnetIds
                      - !Sub 
                        - >-
                          arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${Subnet}
                        - Subnet: !Select
                          - 1
                          - !Ref AppSubnetIds
  CodePipelineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-CodePipelineExecutionRole'
      Tags: 
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-CodePipelineExecutionRole'
        - Key: ApplicationRole
          Value: !Sub '${ServiceName}-Pipeline-Role'
      AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Action: 
                - 'sts:AssumeRole'
              Effect: Allow
              Principal:
                Service: 
                  - codepipeline.amazonaws.com
      Path: /
      Policies:
        - PolicyName: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-ArtifactsS3Bucket'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource: 
                - !Sub 'arn:aws:s3:::${PipelineArtifactsBucketName}/*'
                - !Sub 'arn:aws:s3:::${PipelineArtifactsBucketName}'
        - PolicyName: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-PassRole'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource: 
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/${ResourceNamePrefix}-${EnvironmentType}-SAM-CFExecution-Role'
                  - !GetAtt CodeBuildServiceRole.Arn
        - PolicyName: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-CloudformationAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - 'codebuild:StartBuild'
                  - 'codebuild:BatchGetBuilds'
                Resource: 
                  - !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${CodeBuildProject}'
