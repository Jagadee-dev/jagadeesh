# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: A CloudFormation Template to create AWS RDS & Redshift Secrets with its Rotation & Attachment. Version 1.0
# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform: AWS::Serverless-2016-10-31
# Shared configuration for all resources, more in
# https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Naming Conventions
        Parameters:
          - ResourceNamePrefix
          - EnvironmentType
          - ServiceName
          - Purpose
          - SecretManagerName
      - Label:
          default: Secret Inputs
        Parameters:
          - AutoGenerateStringKey
          - SecretString
          - GenerateStringKey
          - PasswordLength
          - SecretPassExcludeCharacters
          - SecretExcludeInputs
      - Label:
          default: Secret Rotation Inputs
        Parameters:
          - SecretRotationRequired
          - SecretRotationValue
          - ScheduleExpressionValue
      - Label:
          default: Lambda Inputs
        Parameters:
          - SubnetIds
          - ServerlessSgId
          - LambdaInputs
Parameters:
  ResourceNamePrefix:
    Type: String
    Description: (Required) Enter prefix for Resource Names.
  EnvironmentType:
    Type: String
    Description: (Required) Name your EnvironmentType According to your need.
  ServiceName:
    Type: String
    Description: (Required) Enter service name for which secret would be used.
  Purpose:
    Type: String
    Description: (Required) The value denotes the purpose of the secret in service among other secrets.
  SecretManagerName:
    Type: String
    Description: (Required) Specified value will be used for secret name property.
  AutoGenerateStringKey:
    Type: String
    Description: (Required) Select true to create auto generate key for secret else false.
    AllowedValues: ["true", "false"]
  SecretString:
    Type: String
    Description: (Required) Enter value for secret string. The value in JSON format (or) string.
    NoEcho: true
  GenerateStringKey:
    Type: String
    Description: (Conditional) Enter key to create auto generate secret(only if AutoGenerateStringKey & SecretString != NULL is true).
  PasswordLength:
    Type: Number
    Description: (Conditional) Enter length of secret for auto generate key(only if AutoGenerateStringKey is true).
  SecretPassExcludeCharacters:
    Type: String
    Description: (Conditional) Enter characters should be excluded from secret string(only if AutoGenerateStringKey is true).
  SecretExcludeInputs:
    Type: CommaDelimitedList
    Description: (Conditional) Enter the inputs for Generating Secret String in this format 'ExcludeLowercase,ExcludeNumbers,ExcludePunctuation,ExcludeUppercase,IncludeSpace,RequireEachIncludedType'(only if AutoGenerateStringKey is true).
  SecretRotationRequired:
    Type: String
    Description: (Required) Enter true for secret rotation & false to skip.
    AllowedValues: ["true", "false"]
  SecretRotationValue:
    Type: String
    Description: (Required) Enter the duration in hours to rotate the secret during the scheduled window.
  ScheduleExpressionValue:
    Type: String
    Description: (Required) Enter the expression that defines the schedule for rotating your secret.
  SubnetIds:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: (Required) Choose the SubnetIds to create serverless lambda function.
  ServerlessSgId:
    Type: String
    Description: (Required) Enter the Serverless SecurityGroup Id.
  LambdaInputs:
    Type: CommaDelimitedList
    Description: (Required) Enter the lambda inputs in the format 'Handler:MemorySize:Timeout:RunTime'.
Conditions:
  ShouldAutoGenerateStringKey: !Equals [true,!Ref AutoGenerateStringKey]
  IsGenerateStringKey: !Equals ['', !Ref GenerateStringKey]
  IsSecretStringEmpty: !Equals ['', !Ref SecretString]
  IsSecretRotationRequired: !Equals [true, !Ref SecretRotationRequired]
# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
# Each Lambda function is defined by properties:
# https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  SecretRotationLambdaRole:
    Type: 'AWS::IAM::Role'
    Condition: IsSecretRotationRequired
    Properties:
      RoleName: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-${Purpose}-SecretRotation-Lmda-Role'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: 'lambda.amazonaws.com'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
      Policies:
        - PolicyName: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Scrt-Plcy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:DescribeSecret'
                  - 'secretsmanager:GetSecretValue'
                  - 'secretsmanager:PutSecretValue'
                  - 'secretsmanager:UpdateSecretVersionStage'
                Resource: !Sub 'arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-*'
                Condition:
                  StringEquals:
                    secretsmanager:resource/AllowRotationLambdaArn: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-${Purpose}-Secret-Rotation-Lmbda'
              - Effect: Allow
                Action: 'secretsmanager:GetRandomPassword'
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-${Purpose}-SecretRotation-Lmbda-Role'
        - Key: ApplicationRole
          Value: !Sub '${ServiceName}-${Purpose}'
  Secret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Description: !Sub 'This is a Secrets Manager secret for ${ServiceName} service.'
      Name: !Ref SecretManagerName
      Tags:
        - Key: Name
          Value: !Ref SecretManagerName
        - Key: ApplicationRole
          Value: !Sub '${ServiceName}-${Purpose}-Scrt'
      SecretString: !If 
        - ShouldAutoGenerateStringKey
        - !Ref 'AWS::NoValue'
        - !Ref SecretString
      GenerateSecretString: !If 
        - ShouldAutoGenerateStringKey
        - SecretStringTemplate: !If 
            - IsSecretStringEmpty
            - !Ref 'AWS::NoValue'
            - !Ref SecretString
          GenerateStringKey: !If 
            - IsGenerateStringKey
            - !Ref 'AWS::NoValue'
            - !Ref GenerateStringKey
          PasswordLength: !Ref PasswordLength
          ExcludeCharacters: !Ref SecretPassExcludeCharacters
          ExcludeLowercase: !Select [ 0, !Ref SecretExcludeInputs]
          ExcludeNumbers: !Select [ 1, !Ref SecretExcludeInputs]
          ExcludePunctuation: !Select [ 2, !Ref SecretExcludeInputs]
          ExcludeUppercase: !Select [ 3, !Ref SecretExcludeInputs]
          IncludeSpace: !Select [ 4, !Ref SecretExcludeInputs]
          RequireEachIncludedType: !Select [ 5, !Ref SecretExcludeInputs]
        - !Ref 'AWS::NoValue'
  SecretRotationLambda:
    Type: AWS::Serverless::Function
    Condition: IsSecretRotationRequired
    Properties:
      CodeUri: ../source_code/lambda/secret_rotation
      Description: A Lambda to rotate secret based on inputs provided.
      VpcConfig: 
        SubnetIds: !Ref SubnetIds
        SecurityGroupIds: 
          - !Ref ServerlessSgId
      Environment:
        Variables:
          SECRETS_MANAGER_ENDPOINT: !Sub 'https://secretsmanager.${AWS::Region}.amazonaws.com'
          Password_Length: !Ref PasswordLength
          Exclude_Characters: !Ref SecretPassExcludeCharacters
          Exclude_Lowercase: !Select [ 0, !Ref SecretExcludeInputs]
          Exclude_Numbers: !Select [ 1, !Ref SecretExcludeInputs]
          Exclude_Punctuation: !Select [ 2, !Ref SecretExcludeInputs]
          Exclude_Uppercase: !Select [ 3, !Ref SecretExcludeInputs]
          Include_Space: !Select [ 4, !Ref SecretExcludeInputs]
          Require_Each_Included_Type: !Select [ 5, !Ref SecretExcludeInputs]
      Handler: !Select [ 0, !Split [ ':', !Select [ 0, !Ref LambdaInputs ] ] ]
      MemorySize: !Select [ 1, !Split [ ':', !Select [ 0, !Ref LambdaInputs ] ] ]
      Role: !GetAtt SecretRotationLambdaRole.Arn
      Timeout: !Select [ 2, !Split [ ':', !Select [ 0, !Ref LambdaInputs ] ] ]
      Runtime: !Select [ 3, !Split [ ':', !Select [ 0, !Ref LambdaInputs ] ] ]
      ReservedConcurrentExecutions: !Select [ 4, !Split [ ':', !Select [ 0, !Ref LambdaInputs ] ] ]
      FunctionName: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-${Purpose}-Secret-Rotation-Lmbda'
  SecretRotationLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: IsSecretRotationRequired
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SecretRotationLambda.Arn
      Principal: 'secretsmanager.amazonaws.com'
      SourceArn: !Sub 'arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-*'
  SecretRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: IsSecretRotationRequired
    DependsOn: SecretRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt SecretRotationLambda.Arn
      RotationRules:
        Duration: !Ref SecretRotationValue
        ScheduleExpression: !Ref ScheduleExpressionValue
      SecretId: !Ref Secret
      RotateImmediatelyOnUpdate: false
Outputs:
  SecretName:
    Description: Enter the Name of the Secret being created.
    Value: !Ref SecretManagerName
  SecretArn:
    Description: Enter the ARN of the Secret being created.
    Value: !Ref Secret