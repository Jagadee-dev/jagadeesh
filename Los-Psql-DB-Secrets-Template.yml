AWSTemplateFormatVersion: 2010-09-09
Description: A CloudFormation Template to create AWS RDS & Redshift Secrets with its Rotation & Attachment.
Transform: AWS::Serverless-2016-10-31
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Naming Conventions
      Parameters:
        - EnvironmentType
        - ResourceNamePrefix
        - ServiceName
    - Label:
        default: Condition Parameters
      Parameters:
        - SecretType
        - SecretRotationRequired
    - Label:
        default: RotationLambda Inputs
      Parameters:
        - LambdaInputs
        - DBSubnetIds
    - Label:
        default: Common Secret Parameters
      Parameters:
        - SecretPassExcludeCharacters
        - InstanceName
        - SecretStringInputs
    - Label:
        default: Secret RotationSchedule Parameters
      Parameters:
        - SecretRotationDays
        - RotationDuration
        - CronExpresion
        - RotationDaysorCronScheduleRequired
        - RotateSecretImmediately
    - Label:
        default: Rds Secrets
      Parameters:
        - RdsMasterSecretValues
        - RelationShipSecretValue
        - NotificationsSecretValue
        - FileManagerSecretValue
        - SpreadingSecretValue
        - CollateralSecretValue
        - ApprovalSecretValue
        - CovenantSecretValue
        - CreditAvailabilitySecretValue
        - ExceptionsSecretValue
        - LoansSecretValue
        - CreditMemoSecretValue
        - RiskRatingSecretValue
        - DocuSignSecretValue
        - CPFileManagerSecretValue
        - CPLoanSecretValue
        - DBbackupSecretValue
        - DBAutomationSecretValue
        - CodatSecretValue
        - PlaidIntgSecretValue
        - DMSSecretValue
        - CPAdminSecretValue
        - CPEntitySecretValue
        - DataStreamSecretValue
        - FlowSecretValue
        - LoanAutoSecretValue
        - ExposureSecretValue
        - DWHDELSecretValue
        - FinastraSecretValue
        - FlexiFormSecretValue
        - AdminProfileSecretValue
        - CPFlexSecretValue
        - SalesforceSecretValue
        - LoanLolcSecretValue
        - CPLoanLolcSecretValue
        - SalesforceSecretValue
Parameters:
  SecretType:
    Type: String
    Description: Select RDS to create RDSSecrets & Redshift for RedshiftSecrets.
    AllowedValues:
    - Redshift
    - RDS
  EnvironmentType:
    Type: String
    Description: Name your EnvironmentType According to your need.
  ResourceNamePrefix:
    Type: String
    Description: Enter prefix for Resource Names.
  ServiceName:
    Description: (Required) Specify the name of the service.
    Type: String 
  LambdaInputs:
    Type: CommaDelimitedList
    Description: Enter the lambda inputs in the format 'SecurityGroupIds:Handler:MemorySize:Timeout:RunTime'.
  DBSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The list of SubnetIDs in the above mentioned Virtual Private Cloud (VPC) where rotation lambda needs to be provisioned.
  SecretPassExcludeCharacters:
    Type: String
    Description: Enter the special characters to be excluded from secret values.
  SecretRotationDays:
    Type: Number
    Description: (Conditional) Enter the number of days between automatic scheduled rotations of the secret.
    MinValue: 1
    MaxValue: 1000
  SecretRotationRequired:
    Type: String
    Description: Enter true for secret rotation & false to skip.
    AllowedValues:
      - true
      - false
  SecretStringInputs:
    Type: CommaDelimitedList
    Description: Enter the inputs for Generating Secret String in this format 'ExcludeLowercase:ExcludeNumbers:ExcludePunctuation:ExcludeUppercase:IncludeSpace:RequireEachIncludedType'.
  RotationDuration:
    Type: String
    Description: (Conditional) Enter the duration in hours to rotate the secret during the Scheduled Window.
  CronExpression:
    Type: String
    Description: (Conditional) Enter the expression that defines the schedule for rotating your secret.
  RotationDaysorCronScheduleRequired:
    Type: CommaDelimitedList
    Description: (Required) Enter true in Index 0 for specifying SecretRotationDays & Enter true in Index 1 for specifying CronExpression. Both Index 0 & 1 can't be true as CloudFormation supports either SecretRotationDays or CronExpression only. eg-true,false.
    AllowedValues: ["true", "false"]
  RdsMasterSecretValues:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}'
  AdminSecretValues:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}'
  RelationShipSecretValue:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}'
  NotificationsSecretValue:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}'
  FileManagerSecretValue:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}'
  SpreadingSecretValue:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}'
  CollateralSecretValue:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}'
  ApprovalSecretValue:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}'
  CovenantSecretValue:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}'
  CreditAvailabilitySecretValue:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}'
  ExceptionsSecretValue:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}'
  LoansSecretValue:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}' 
  CreditMemoSecretValue:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}' 
  RiskRatingSecretValue:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}' 
  DocuSignSecretValue:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}' 
  CPFileManagerSecretValue:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}' 
  CPLoanSecretValue:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}' 
  DBbackupSecretValue:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}' 
  DBAutomationSecretValue:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}' 
  CodatSecretValue:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}'  
  PlaidIntgSecretValue:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}' 
  DMSSecretValue:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}'
  CPEntitySecretValue:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}'
  CPAdminSecretValue:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}'
  DataStreamSecretValue:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}'
  FlowSecretValue:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}'
  LoanAutoSecretValue:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}'
  ExposureSecretValue:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}'
  DWHDELSecretValue:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}'
  FinastraSecretValue:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}'    
  FlexiFormSecretValue:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}'
  AdminProfileSecretValue:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}'
  CPFlexSecretValue:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}'
  LoanLolcSecretValue:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}' 
  CPLoanLolcSecretValue:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}' 
  SalesforceSecretValue:
    Type: CommaDelimitedList
    NoEcho: false
    Description: 'Enter CREATE for secret creation & - to skip creation, Enter RDS Secret information in JSON string format and password will be auto generated. (eg) - CREATE,{"username": "adt"}'
  RotateSecretImmediately:
    Type: String
    Description: 'Enter true to rotate secret immediately & false not to rotate secret immediately'
Conditions:
  IsSecretRotationRequired: !Equals [true, !Ref SecretRotationRequired]
  IsRedshiftSecretRequired: !Equals [Redshift, !Ref SecretType]
  IsRDSSecretRequired: !Equals [RDS, !Ref SecretType]
  IsRotationDaysRequired: !Equals [true, !Select [0, !Ref RotationDaysorCronScheduleRequired]]
  IsCronExpressionRequired: !Equals [true, !Select [1, !Ref RotationDaysorCronScheduleRequired]]
  
  RdsMasterSecretReq: !Equals [ !Select [ 0, !Ref RdsMasterSecretValues ], 'CREATE' ]
  RdsMasterRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition RdsMasterSecretReq ]
  
  AdminSecretReq: !Equals [ !Select [ 0, !Ref AdminSecretValues ], 'CREATE' ]
  AdminRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition AdminSecretReq ]
  
  RelationShipSecretReq: !Equals [ !Select [ 0, !Ref RelationShipSecretValue ], 'CREATE' ]
  RelationShipRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition RelationShipSecretReq ]
  
  NotificationsSecretReq: !Equals [ !Select [ 0, !Ref NotificationsSecretValue ], 'CREATE' ]
  NotificationsRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition NotificationsSecretReq ]
  
  FileManagerSecretReq: !Equals [ !Select [ 0, !Ref FileManagerSecretValue ], 'CREATE' ]
  FileManagerRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition FileManagerSecretReq ]
  
  SpreadingSecretReq: !Equals [ !Select [ 0, !Ref SpreadingSecretValue ], 'CREATE' ]
  SpreadingRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition SpreadingSecretReq ]
  
  CollateralSecretReq: !Equals [ !Select [ 0, !Ref CollateralSecretValue ], 'CREATE' ]
  CollateralRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition CollateralSecretReq ]
  
  ApprovalSecretReq: !Equals [ !Select [ 0, !Ref ApprovalSecretValue ], 'CREATE' ]
  ApprovalRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition ApprovalSecretReq ]
  
  CovenantSecretReq: !Equals [ !Select [ 0, !Ref CovenantSecretValue ], 'CREATE' ]
  CovenantRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition CovenantSecretReq ]
  
  CreditAvailabilitySecretReq: !Equals [ !Select [ 0, !Ref CreditAvailabilitySecretValue ], 'CREATE' ]
  CreditAvailabilityRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition CreditAvailabilitySecretReq ]
  
  ExceptionsSecretReq: !Equals [ !Select [ 0, !Ref ExceptionsSecretValue ], 'CREATE' ]
  ExceptionsRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition ExceptionsSecretReq ]
  
  LoansSecretReq: !Equals [ !Select [ 0, !Ref LoansSecretValue ], 'CREATE' ]
  LoansRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition LoansSecretReq ]
  
  CreditMemoSecretReq: !Equals [ !Select [ 0, !Ref CreditMemoSecretValue ], 'CREATE' ]
  CreditMemoRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition CreditMemoSecretReq ]
  
  RiskRatingSecretReq: !Equals [ !Select [ 0, !Ref RiskRatingSecretValue ], 'CREATE' ]
  RiskRatingRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition RiskRatingSecretReq ]
  
  DocuSignSecretReq: !Equals [ !Select [ 0, !Ref DocuSignSecretValue ], 'CREATE' ]
  DocuSignRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition DocuSignSecretReq ]
  
  CPFileManagerSecretReq: !Equals [ !Select [ 0, !Ref CPFileManagerSecretValue ], 'CREATE' ]
  CPFileManagerRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition CPFileManagerSecretReq ]
  
  CPLoanSecretReq: !Equals [ !Select [ 0, !Ref CPLoanSecretValue ], 'CREATE' ]
  CPLoanRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition CPLoanSecretReq ]
  
  DBbackupSecretReq: !Equals [ !Select [ 0, !Ref DBbackupSecretValue ], 'CREATE' ]
  DBbackupRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition DBbackupSecretReq ]
  
  DBAutomationSecretReq: !Equals [ !Select [ 0, !Ref DBAutomationSecretValue ], 'CREATE' ]
  DBAutomationRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition DBAutomationSecretReq ]
  
  CodatSecretReq: !Equals [ !Select [ 0, !Ref CodatSecretValue ], 'CREATE' ]
  CodatRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition CodatSecretReq ]
  
  PlaidIntgSecretReq: !Equals [ !Select [ 0, !Ref PlaidIntgSecretValue ], 'CREATE' ]
  PlaidIntgRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition PlaidIntgSecretReq ]
  
  DMSSecretReq: !Equals [ !Select [ 0, !Ref DMSSecretValue ], 'CREATE' ]
  DMSRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition DMSSecretReq ]
  
  CPEntitySecretReq: !Equals [ !Select [ 0, !Ref CPEntitySecretValue ], 'CREATE' ]
  CPEntityRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition CPEntitySecretReq ]
  
  CPAdminSecretReq: !Equals [ !Select [ 0, !Ref CPAdminSecretValue ], 'CREATE' ]
  CPAdminRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition CPAdminSecretReq ]
  
  DataStreamSecretReq: !Equals [ !Select [ 0, !Ref DataStreamSecretValue ], 'CREATE' ]
  DataStreamRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition DataStreamSecretReq ]
  
  FlowSecretReq: !Equals [ !Select [ 0, !Ref FlowSecretValue ], 'CREATE' ]
  FlowRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition FlowSecretReq ]

  LoanAutoSecretReq: !Equals [ !Select [ 0, !Ref LoanAutoSecretValue ], 'CREATE' ]
  LoanAutoRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition LoanAutoSecretReq ]

  ExposureSecretReq: !Equals [ !Select [ 0, !Ref ExposureSecretValue ], 'CREATE' ]
  ExposureRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition ExposureSecretReq ]

  DWHDELSecretReq: !Equals [ !Select [ 0, !Ref DWHDELSecretValue ], 'CREATE' ]
  DWHDELSecretRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition DWHDELSecretReq ]
  
  FinastraSecretReq: !Equals [ !Select [ 0, !Ref FinastraSecretValue ], 'CREATE' ]
  FinastraSecretRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition FinastraSecretReq ] 

  FlexiFormSecretReq: !Equals [ !Select [ 0, !Ref FlexiFormSecretValue ], 'CREATE' ]
  FlexiFormRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition FlexiFormSecretReq ] 

  AdminProfileSecretReq: !Equals [ !Select [ 0, !Ref AdminProfileSecretValue ], 'CREATE' ]
  AdminProfileRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition AdminProfileSecretReq ]

  CPFlexSecretReq: !Equals [ !Select [ 0, !Ref CPFlexSecretValue ], 'CREATE' ]
  CPFlexRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition CPFlexSecretReq ]

  LoanLolcSecretReq: !Equals [ !Select [ 0, !Ref LoanLolcSecretValue ], 'CREATE' ]
  LoanLolcRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition LoanLolcSecretReq ]

  CPLoanLolcSecretReq: !Equals [ !Select [ 0, !Ref CPLoanLolcSecretValue ], 'CREATE' ]
  CPLoanLolcRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition CPLoanLolcSecretReq ]

  SalesforceSecretReq: !Equals [ !Select [ 0, !Ref SalesforceSecretValue ], 'CREATE' ]
  SalesforceRotationReq: !And [ !Condition IsSecretRotationRequired, !Condition SalesforceSecretReq ]
Resources:
#RDS
  PSQLRotationLambdaRole:
    Type: AWS::IAM::Role
    Condition: IsSecretRotationRequired
    Properties:
      RoleName: !Sub '${ResourceNamePrefix}-${EnvironmentType}-PSQL-SecretRotation-Role'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: !Sub '${ResourceNamePrefix}-${EnvironmentType}-PSQL-Lambda-Vpc-Policy'
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Action:
            - ec2:CreateNetworkInterface
            - ec2:DeleteNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DetachNetworkInterface
            Resource: '*'
            Effect: Allow
      - PolicyName: !Sub '${ResourceNamePrefix}-${EnvironmentType}-PSQL-Secret-Policy'
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Action:
            - secretsmanager:DescribeSecret
            - secretsmanager:GetSecretValue
            - secretsmanager:PutSecretValue
            - secretsmanager:UpdateSecretVersionStage
            Resource: !Sub 'arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${ResourceNamePrefix}-${EnvironmentType}-*'
            Effect: Allow
            Condition:
              StringEquals:
                secretsmanager:resource/AllowRotationLambdaArn: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${ResourceNamePrefix}-${EnvironmentType}-PSQL-Secret-Rotation-Lmbda'
          - Action:
            - secretsmanager:GetRandomPassword
            Resource: '*'
            Effect: Allow
      Tags:
      - Key: Name
        Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-PSQL-SecretRotation-Lmbda-Role'
      - Key: ApplicationRole
        Value: PSQLSecretRotation-Role
  AdminSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: AdminSecretReq
    Properties:
      Description: This is a Secrets Manager secret for Auth and admin service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Admin-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref AdminSecretValues ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Admin-Scrt'  
        - Key: ApplicationRole
          Value: Psql-Admin-Scrt
  AdminSecretRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: AdminRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref AdminSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  PSQLRotationLambda:
    Type: AWS::Serverless::Function
    Condition: IsSecretRotationRequired
    Properties:
      CodeUri: ../source_code/lambda/psql_secret_rotation
      Description: Conducts an AWS SecretsManager secret rotation for RDS MySQL using single user rotation scheme.
      VpcConfig:
        SubnetIds: !Ref DBSubnetIds
        SecurityGroupIds: 
            - !Select [ 0, !Split [ ':', !Select [ 0, !Ref LambdaInputs ] ] ]
      Environment:
        Variables:
          SECRETS_MANAGER_ENDPOINT: !Sub 'https://secretsmanager.${AWS::Region}.amazonaws.com'
          EXCLUDE_CHARACTERS: !Ref SecretPassExcludeCharacters
      Handler: !Select [ 1, !Split [ ':', !Select [ 0, !Ref LambdaInputs ] ] ]
      MemorySize: !Select [ 2, !Split [ ':', !Select [ 0, !Ref LambdaInputs ] ] ]
      Role: !GetAtt PSQLRotationLambdaRole.Arn
      Timeout: !Select [ 3, !Split [ ':', !Select [ 0, !Ref LambdaInputs ] ] ]
      Runtime: !Select [ 4, !Split [ ':', !Select [ 0, !Ref LambdaInputs ] ] ]
      FunctionName: !Sub '${ResourceNamePrefix}-${EnvironmentType}-PSQL-Secret-Rotation-Lmbda'
  PSQLRotationLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: IsSecretRotationRequired
    DependsOn: PSQLRotationLambda
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PSQLRotationLambda.Arn
      Principal: !Sub 'secretsmanager.amazonaws.com'
      SourceArn: !Sub 'arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-*'
#RdsMasterSecret
  RdsMasterSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: RdsMasterSecretReq
    Properties:
      Description: This is a Secrets Manager secret for RDS DB instance.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-RdsMaster-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref RdsMasterSecretValues ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-RdsMaster-Scrt'  
        - Key: ApplicationRole
          Value: Psql-MasterSecret-Scrt
  RdsMasterSecretRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: RdsMasterRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref RdsMasterSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  RelationShipSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: RelationShipSecretReq
    Properties:
      Description: This is a Secrets Manager secret for RelationShip service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-RelationShip-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref RelationShipSecretValue ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-RelationShip-Scrt'  
        - Key: ApplicationRole
          Value: Psql-RelationShip-Scrt
  RelationShipSecretRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: RelationShipRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref RelationShipSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  NotificationsSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: NotificationsSecretReq
    Properties:
      Description: This is a Secrets Manager secret for Notifications service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Notifications-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref NotificationsSecretValue ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Notifications-Scrt'  
        - Key: ApplicationRole
          Value: Psql-Notifications-Scrt
  NotificationsSecretRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: NotificationsRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref NotificationsSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  FileManagerSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: FileManagerSecretReq
    Properties:
      Description: This is a Secrets Manager secret for File Manager service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-FileManager-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref FileManagerSecretValue ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-FileManager-Scrt'  
        - Key: ApplicationRole
          Value: Psql-FileManager-Scrt
  FileManagerSecretRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: FileManagerRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref FileManagerSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  SpreadingSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: SpreadingSecretReq
    Properties:
      Description: This is a Secrets Manager secret for Spreading service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Spreading-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref SpreadingSecretValue ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Spreading-Scrt'  
        - Key: ApplicationRole
          Value: Psql-Spreading-Scrt
  SpreadingSecretRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: SpreadingRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref SpreadingSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  CollateralSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: CollateralSecretReq
    Properties:
      Description: This is a Secrets Manager secret for Collateral service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Collateral-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref CollateralSecretValue ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Collateral-Scrt'  
        - Key: ApplicationRole
          Value: Psql-Collateral-Scrt
  CollateralSecretRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: CollateralRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref CollateralSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  ApprovalSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: ApprovalSecretReq
    Properties:
      Description: This is a Secrets Manager secret for Approval service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Approval-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref ApprovalSecretValue ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Approval-Scrt'  
        - Key: ApplicationRole
          Value: Psql-Approval-Scrt
  ApprovalSecretRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: ApprovalRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref ApprovalSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  CovenantSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: CovenantSecretReq
    Properties:
      Description: This is a Secrets Manager secret for Covenant service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Covenant-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref CovenantSecretValue ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Covenant-Scrt'  
        - Key: ApplicationRole
          Value: Psql-Covenant-Scrt
  CovenantSecretRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: CovenantRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref CovenantSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  CreditAvailabilitySecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: CreditAvailabilitySecretReq
    Properties:
      Description: This is a Secrets Manager secret for CreditAvailability service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-CreditAvailability-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref CreditAvailabilitySecretValue ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-CreditAvailability-Scrt'  
        - Key: ApplicationRole
          Value: Psql-CreditAvailability-Scrt
  CreditAvailabilitySecretRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: CreditAvailabilityRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref CreditAvailabilitySecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  ExceptionsSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: ExceptionsSecretReq
    Properties:
      Description: This is a Secrets Manager secret for Exceptions service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Exceptions-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref ExceptionsSecretValue ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Exceptions-Scrt'  
        - Key: ApplicationRole
          Value: Psql-Exceptions-Scrt
  ExceptionsSecretRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: ExceptionsRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref ExceptionsSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  LoansSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: LoansSecretReq
    Properties:
      Description: This is a Secrets Manager secret for Loans service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Loans-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref LoansSecretValue ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Loans-Scrt'  
        - Key: ApplicationRole
          Value: Psql-Loans-Scrt
  LoansSecretRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: LoansRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref LoansSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  CreditMemoSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: CreditMemoSecretReq
    Properties:
      Description: This is a Secrets Manager secret for CreditMemo service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-CreditMemo-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref CreditMemoSecretValue ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-CreditMemo-Scrt'  
        - Key: ApplicationRole
          Value: Psql-CreditMemo-Scrt
  CreditMemoSecretRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: CreditMemoRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref CreditMemoSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  RiskRatingSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: RiskRatingSecretReq
    Properties:
      Description: This is a Secrets Manager secret for RiskRating service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-RiskRating-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref RiskRatingSecretValue ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-RiskRating-Scrt'  
        - Key: ApplicationRole
          Value: Psql-RiskRating-Scrt
  RiskRatingSecretRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: RiskRatingRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref RiskRatingSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  DocuSignSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: DocuSignSecretReq
    Properties:
      Description: This is a Secrets Manager secret for DocuSign service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-DocuSign-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref DocuSignSecretValue ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-DocuSign-Scrt'  
        - Key: ApplicationRole
          Value: Psql-DocuSign-Scrt
  DocuSignSecretRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: DocuSignRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref DocuSignSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  CPFileManagerSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: CPFileManagerSecretReq
    Properties:
      Description: This is a Secrets Manager secret for CPFileManager service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-CPFileManager-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref CPFileManagerSecretValue ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-CPFileManager-Scrt'  
        - Key: ApplicationRole
          Value: Psql-CPFileManager-Scrt
  CPFileManagerSecretRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: CPFileManagerRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref CPFileManagerSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  CPLoanSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: CPLoanSecretReq
    Properties:
      Description: This is a Secrets Manager secret for CPLoan service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-CPLoan-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref CPLoanSecretValue ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-CPLoan-Scrt'  
        - Key: ApplicationRole
          Value: Psql-CPLoan-Scrt
  CPLoanSecretRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: CPLoanRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref CPLoanSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  DBbackupSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: DBbackupSecretReq
    Properties:
      Description: This is a Secrets Manager secret for DBbackup service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-DBbackup-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref DBbackupSecretValue ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-DBbackup-Scrt'  
        - Key: ApplicationRole
          Value: Psql-DBbackup-Scrt
  DBbackupRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: DBbackupRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref DBbackupSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  DBAutomationSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: DBAutomationSecretReq
    Properties:
      Description: This is a Secrets Manager secret for DBAutomation service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-DBAutomation-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref DBAutomationSecretValue ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-DBAutomation-Scrt'  
        - Key: ApplicationRole
          Value: Psql-DBAutomation-Scrt
  DBAutomationRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: DBAutomationRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref DBAutomationSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  CodatSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: CodatSecretReq
    Properties:
      Description: This is a Secrets Manager secret for Codat service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Codat-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref CodatSecretValue ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Codat-Scrt'  
        - Key: ApplicationRole
          Value: Psql-Codat-Scrt
  CodatRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: CodatRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref CodatSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  PlaidIntgSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: PlaidIntgSecretReq
    Properties:
      Description: This is a Secrets Manager secret for PlaidIntg service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-PlaidIntg-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref PlaidIntgSecretValue ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-PlaidIntg-Scrt'  
        - Key: ApplicationRole
          Value: Psql-PlaidIntg-Scrt
  PlaidIntgRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: PlaidIntgRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref PlaidIntgSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  DMSSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: DMSSecretReq
    Properties:
      Description: This is a Secrets Manager secret for DMS service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-DMS-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref DMSSecretValue ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-DMS-Scrt'  
        - Key: ApplicationRole
          Value: Psql-DMS-Scrt
  DMSRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: DMSRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref DMSSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  CPEntitySecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: CPEntitySecretReq
    Properties:
      Description: This is a Secrets Manager secret for CPEntity service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-CPEntity-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref CPEntitySecretValue ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-CPEntity-Scrt'  
        - Key: ApplicationRole
          Value: Psql-CPEntity-Scrt
  CPEntityRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: CPEntityRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref CPEntitySecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  CPAdminSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: CPAdminSecretReq
    Properties:
      Description: This is a Secrets Manager secret for CPAdmin service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-CPAdmin-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref CPAdminSecretValue ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-CPAdmin-Scrt'  
        - Key: ApplicationRole
          Value: Psql-CPAdmin-Scrt
  CPAdminRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: CPAdminRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref CPAdminSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  DataStreamSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: DataStreamSecretReq
    Properties:
      Description: This is a Secrets Manager secret for DataStream service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-DataStream-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref DataStreamSecretValue ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-DataStream-Scrt'  
        - Key: ApplicationRole
          Value: Psql-DataStream-Scrt
  DataStreamRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: DataStreamRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref DataStreamSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  FlowSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: FlowSecretReq
    Properties:
      Description: This is a Secrets Manager secret for Flow service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Flow-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref FlowSecretValue ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Flow-Scrt'  
        - Key: ApplicationRole
          Value: Psql-Flow-Scrt
  FlowRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: FlowRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref FlowSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  LoanAutoSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: LoanAutoSecretReq
    Properties:
      Description: This is a Secrets Manager secret for LoanAuto service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-LoanAuto-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref LoanAutoSecretValue ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-LoanAuto-Scrt'  
        - Key: ApplicationRole
          Value: Psql-LoanAuto-Scrt
  LoanAutoRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: LoanAutoRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref LoanAutoSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  ExposureSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: ExposureSecretReq
    Properties:
      Description: This is a Secrets Manager secret for Exposure service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Exposure-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref ExposureSecretValue ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Exposure-Scrt'  
        - Key: ApplicationRole
          Value: Psql-Exposure-Scrt
  ExposureRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: ExposureRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref ExposureSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  DWHDELSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: DWHDELSecretReq
    Properties:
      Description: This is a Secrets Manager secret for DWH DEL service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-DWHDEL-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref DWHDELSecretValue ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-DWHDEL-Scrt'  
        - Key: ApplicationRole
          Value: Psql-DWHDEL-Scrt
  DWHDELSecretRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: DWHDELSecretRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref DWHDELSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  FinastraSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: FinastraSecretReq
    Properties:
      Description: This is a Secrets Manager secret for Finastra service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Finastra-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref FinastraSecretValue ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Finastra-Scrt'  
        - Key: ApplicationRole
          Value: Psql-Finastra-Scrt
  FinastraSecretRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: FinastraSecretRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref FinastraSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately   
  FlexiFormSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: FlexiFormSecretReq
    Properties:
      Description: This is a Secrets Manager secret for FlexiForm service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-FlexiForm-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref FlexiFormSecretValue ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-FlexiForm-Scrt'  
        - Key: ApplicationRole
          Value: Psql-FlexiForm-Scrt
  FlexiFormRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: FlexiFormRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref FlexiFormSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  AdminProfileSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: AdminProfileSecretReq
    Properties:
      Description: This is a Secrets Manager secret for AdminProfile service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-AdminProfile-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref AdminProfileSecretValue ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-AdminProfile-Scrt'  
        - Key: ApplicationRole
          Value: Psql-AdminProfile-Scrt
  AdminProfileRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: AdminProfileRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref AdminProfileSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  CPFlexSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: CPFlexSecretReq
    Properties:
      Description: This is a Secrets Manager secret for CPFlex service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-CPFlex-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref CPFlexSecretValue ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-CPFlex-Scrt'  
        - Key: ApplicationRole
          Value: Psql-CPFlex-Scrt
  CPFlexSecretRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: CPFlexRotationReq
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref CPFlexSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  LoanLolcSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: LoanLolcSecretReq
    Properties:
      Description: This is a Secrets Manager secret for LoanLolc service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-LoanLolc-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref LoanLolcSecretValue ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-LoanLolc-Scrt'  
        - Key: ApplicationRole
          Value: Psql-LoanLolc-Scrt
  LoanLolcSecretRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: LoanLolcRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref LoanLolcSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  CPLoanLolcSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: CPLoanLolcSecretReq
    Properties:
      Description: This is a Secrets Manager secret for CPLoanLolc service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-CPLoanLolc-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref CPLoanLolcSecretValue ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-CPLoanLolc-Scrt'  
        - Key: ApplicationRole
          Value: Psql-CPLoanLolc-Scrt
  CPLoanLolcSecretRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: CPLoanLolcRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref CPLoanLolcSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
  SalesforceSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: SalesforceSecretReq
    Properties:
      Description: This is a Secrets Manager secret for Salesforce service.
      Name: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Salesforce-Scrt'
      GenerateSecretString:
        SecretStringTemplate: !Select [ 1, !Ref SalesforceSecretValue ]
        GenerateStringKey: 'password'
        PasswordLength: 20
        ExcludeCharacters: !Ref SecretPassExcludeCharacters
        ExcludeLowercase: !Select [ 0, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeNumbers: !Select [ 1, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludePunctuation: !Select [ 2, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        ExcludeUppercase: !Select [ 3, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        IncludeSpace: !Select [ 4, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
        RequireEachIncludedType: !Select [ 5, !Split [ ':', !Select [ 0, !Ref SecretStringInputs ] ] ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Salesforce-Scrt'  
        - Key: ApplicationRole
          Value: Psql-Salesforce-Scrt
  SalesforceSecretRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: SalesforceRotationReq
    DependsOn: PSQLRotationLambdaPermission
    Properties:
      RotationLambdaARN: !GetAtt PSQLRotationLambda.Arn
      RotationRules:
        Duration: !Ref RotationDuration
        AutomaticallyAfterDays: !If [IsRotationDaysRequired, !Ref SecretRotationDays, !Ref "AWS::NoValue"]
        ScheduleExpression: !If [IsCronExpressionRequired, !Ref CronExpression, !Ref "AWS::NoValue"]
      SecretId: !Ref SalesforceSecret
      RotateImmediatelyOnUpdate: !Ref RotateSecretImmediately
Outputs:
  RdsMasterSecretName:
    Value: !If
      - RdsMasterSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-RdsMaster-Scrt'
      - 'NotCreated'
  RdsMasterSecretArn:
    Value: !If
      - RdsMasterSecretReq
      - !Ref RdsMasterSecret
      - 'NotCreated'
  RelationShipSecretName:
    Value: !If
      - RelationShipSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-RelationShip-Scrt'
      - 'NotCreated'
  RelationShipSecretArn:
    Value: !If
      - RelationShipSecretReq
      - !Ref RelationShipSecret
      - 'NotCreated'
  NotificationsSecretName:
    Value: !If
      - NotificationsSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Notifications-Scrt'
      - 'NotCreated'
  NotificationsSecretArn:
    Value: !If
      - NotificationsSecretReq
      - !Ref NotificationsSecret
      - 'NotCreated'
  FileManagerSecretName:
    Value: !If
      - FileManagerSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-FileManager-Scrt'
      - 'NotCreated'
  FileManagerSecretArn:
    Value: !If
      - FileManagerSecretReq
      - !Ref FileManagerSecret
      - 'NotCreated'
  SpreadingSecretName:
    Value: !If
      - SpreadingSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Spreading-Scrt'
      - 'NotCreated'
  SpreadingSecretArn:
    Value: !If
      - SpreadingSecretReq
      - !Ref SpreadingSecret
      - 'NotCreated'
  CollateralSecretName:
    Value: !If
      - CollateralSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Collateral-Scrt'
      - 'NotCreated'
  CollateralSecretArn:
    Value: !If
      - CollateralSecretReq
      - !Ref CollateralSecret
      - 'NotCreated'
  ApprovalSecretName:
    Value: !If
      - ApprovalSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Approval-Scrt'
      - 'NotCreated'
  ApprovalSecretArn:
    Value: !If
      - ApprovalSecretReq
      - !Ref ApprovalSecret
      - 'NotCreated'
  CovenantSecretName:
    Value: !If
      - CovenantSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Covenant-Scrt'
      - 'NotCreated'
  CovenantSecretArn:
    Value: !If
      - CovenantSecretReq
      - !Ref CovenantSecret
      - 'NotCreated'
  CreditAvailabilitySecretName:
    Value: !If
      - CreditAvailabilitySecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-CreditAvailability-Scrt'
      - 'NotCreated'
  CreditAvailabilitySecretArn:
    Value: !If
      - CreditAvailabilitySecretReq
      - !Ref CreditAvailabilitySecret
      - 'NotCreated'
  ExceptionSecretName:
    Value: !If
      - ExceptionsSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Exceptions-Scrt'
      - 'NotCreated'
  ExceptionSecretArn:
    Value: !If
      - ExceptionsSecretReq
      - !Ref ExceptionsSecret
      - 'NotCreated'
  LoansSecretName:
    Value: !If
      - LoansSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Loans-Scrt'
      - 'NotCreated'
  LoansSecretArn:
    Value: !If
      - LoansSecretReq
      - !Ref LoansSecret
      - 'NotCreated'
  CreditMemoSecretName:
    Value: !If
      - CreditMemoSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-CreditMemo-Scrt'
      - 'NotCreated'
  CreditMemoSecretArn:
    Value: !If
      - CreditMemoSecretReq
      - !Ref CreditMemoSecret
      - 'NotCreated'
  RiskRatingSecretName:
    Value: !If
      - RiskRatingSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-RiskRating-Scrt'
      - 'NotCreated'
  RiskRatingSecretArn:
    Value: !If
      - RiskRatingSecretReq
      - !Ref RiskRatingSecret
      - 'NotCreated'
  DocuSignSecretName:
    Value: !If
      - DocuSignSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-DocuSign-Scrt'
      - 'NotCreated'
  DocuSignSecretArn:
    Value: !If
      - DocuSignSecretReq
      - !Ref DocuSignSecret
      - 'NotCreated'
  CPFileManagerSecretName:
    Value: !If
      - CPFileManagerSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-CPFileManager-Scrt'
      - 'NotCreated'
  CPFileManagerSecretArn:
    Value: !If
      - CPFileManagerSecretReq
      - !Ref CPFileManagerSecret
      - 'NotCreated'
  CPLoanSecretName:
    Value: !If
      - CPLoanSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-CPLoan-Scrt'
      - 'NotCreated'
  CPLoanSecretArn:
    Value: !If
      - CPLoanSecretReq
      - !Ref CPLoanSecret
      - 'NotCreated'
  DBbackupSecretName:
    Value: !If
      - DBbackupSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-DBbackup-Scrt'
      - 'NotCreated'
  DBbackupSecretArn:
    Value: !If
      - DBbackupSecretReq
      - !Ref DBbackupSecret
      - 'NotCreated'
  DBAutomationSecretName:
    Value: !If
      - DBAutomationSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-DBAutomation-Scrt'
      - 'NotCreated'
  DBAutomationSecretArn:
    Value: !If
      - DBAutomationSecretReq
      - !Ref DBAutomationSecret
      - 'NotCreated'
  CodatSecretName:
    Value: !If
      - CodatSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Codat-Scrt'
      - 'NotCreated'
  CodatSecretArn:
    Value: !If
      - CodatSecretReq
      - !Ref CodatSecret
      - 'NotCreated'
  PlaidIntgSecretName:
    Value: !If
      - PlaidIntgSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-PlaidIntg-Scrt'
      - 'NotCreated'
  PlaidIntgSecretArn:
    Value: !If
      - PlaidIntgSecretReq
      - !Ref PlaidIntgSecret
      - 'NotCreated'
  DMSSecretName:
    Value: !If
      - DMSSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-DMS-Scrt'
      - 'NotCreated'
  DMSSecretArn:
    Value: !If
      - DMSSecretReq
      - !Ref DMSSecret
      - 'NotCreated'
  AdminSecretName:
    Value: !If
      - AdminSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Admin-Scrt'
      - 'NotCreated'
  AdminSecretArn:
    Value: !If
      - AdminSecretReq
      - !Ref AdminSecret
      - 'NotCreated'
  CPAdminSecretName:
    Value: !If
      - CPAdminSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-CPAdmin-Scrt'
      - 'NotCreated'
  CPAdminSecretArn:
    Value: !If
      - CPAdminSecretReq
      - !Ref CPAdminSecret
      - 'NotCreated'
  CPEntitySecretName:
    Value: !If
      - CPEntitySecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-CPEntity-Scrt'
      - 'NotCreated'
  CPEntitySecretArn:
    Value: !If
      - CPEntitySecretReq
      - !Ref CPEntitySecret
      - 'NotCreated'
  DataStreamSecretName:
    Value: !If
      - DataStreamSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-DataStream-Scrt'
      - 'NotCreated'
  DataStreamSecretArn:
    Value: !If
      - DataStreamSecretReq
      - !Ref DataStreamSecret
      - 'NotCreated'
  FlowSecretName:
    Value: !If
      - FlowSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Flow-Scrt'
      - 'NotCreated'
  FlowSecretArn:
    Value: !If
      - FlowSecretReq
      - !Ref FlowSecret
      - 'NotCreated'
  LoanAutoSecretName:
    Value: !If
      - LoanAutoSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-LoanAuto-Scrt'
      - 'NotCreated'
  LoanAutoSecretArn:
    Value: !If
      - LoanAutoSecretReq
      - !Ref LoanAutoSecret
      - 'NotCreated'
  ExposureSecretName:
    Value: !If
      - ExposureSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Exposure-Scrt'
      - 'NotCreated'
  ExposureSecretArn:
    Value: !If
      - ExposureSecretReq
      - !Ref ExposureSecret
      - 'NotCreated'
  DWHDELSecretName:
    Value: !If
      - DWHDELSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-DWHDEL-Scrt'
      - 'NotCreated'
  DWHDELSecretArn:
    Value: !If
      - DWHDELSecretReq
      - !Ref DWHDELSecret
      - 'NotCreated'
  FinastraSecretName:
    Value: !If
      - FinastraSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Finastra-Scrt'
      - 'NotCreated'
  FinastraSecretArn:
    Value: !If
      - FinastraSecretReq
      - !Ref FinastraSecret
      - 'NotCreated'
  FlexiFormSecretName:
    Value: !If
      - FlexiFormSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-FlexiForm-Scrt'
      - 'NotCreated'
  FlexiFormSecretArn:
    Value: !If
      - FlexiFormSecretReq
      - !Ref FlexiFormSecret
      - 'NotCreated'
  AdminProfileSecretName:
    Value: !If
      - AdminProfileSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-AdminProfile-Scrt'
      - 'NotCreated'
  AdminProfileSecretArn:
    Value: !If
      - AdminProfileSecretReq
      - !Ref AdminProfileSecret
      - 'NotCreated'
  CPFlexSecretName:
    Value: !If
      - CPFlexSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-CPFlex-Scrt'
      - 'NotCreated'
  CPFlexSecretArn:
    Value: !If
      - CPFlexSecretReq
      - !Ref CPFlexSecret
      - 'NotCreated'
  LoanLolcSecretName:
    Value: !If
      - LoanLolcSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-LoanLolc-Scrt'
      - 'NotCreated'
  LoanLolcSecretArn:
    Value: !If
      - LoanLolcSecretReq
      - !Ref LoanLolcSecret
      - 'NotCreated'
  CPLoanLolcSecretName:
    Value: !If
      - CPLoanLolcSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-CPLoanLolc-Scrt'
      - 'NotCreated'
  CPLoanLolcSecretArn:
    Value: !If
      - CPLoanLolcSecretReq
      - !Ref CPLoanLolcSecret
      - 'NotCreated'
  SalesforceSecretName:
    Value: !If
      - SalesforceSecretReq
      - !Sub '${ResourceNamePrefix}-${EnvironmentType}-${ServiceName}-Salesforce-Scrt'
      - 'NotCreated'
  SalesforceSecretArn:
    Value: !If
      - SalesforceSecretReq
      - !Ref SalesforceSecret
      - 'NotCreated'